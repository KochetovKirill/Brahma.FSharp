{
module Parser.Lexer

open Microsoft.FSharp.Text.Lexing
open Parser.Parser

let lexeme lexbuf = LexBuffer<_>.LexemeString(lexbuf)
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' '\r' '\n']
let chars = ['a'-'z' 'A'-'Z']


rule token = parse
| whitespace { token lexbuf }
| digit+ ('.'digit+)? { NUMBER(lexeme lexbuf)}
| '(' { LBRACE(lexeme lexbuf) }
| ')' { RBRACE(lexeme lexbuf) }
| ',' { COMMA(lexeme lexbuf) }
| ';' { SEMI(lexeme lexbuf) }
| "Set" { SET(lexeme lexbuf) }
| "Mvc" { MVC(lexeme lexbuf) }
| "Mov" { MOV(lexeme lexbuf) }
| "Eps" { EPS(lexeme lexbuf) }
| eof { RNGLR_EOF ("")}
| _ {  failwithf "unexpected input: %s" <| string lexeme }

